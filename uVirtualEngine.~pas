unit uVirtualEngine;

interface

uses Messages,Forms, SysUtils, Variants, Classes, Controls,ExtCtrls,
     commctrl,StdCtrls,ComCtrls, Dbtables,ZAbstractRODataset, ZAbstractDataset,
  ZDataset, ZConnection,IniFiles, uDM, QRCtrls, QuickRpt, windows ;
    
{*       DAFTAR FUNGSI DAN PROSEDUR TERDISTRIBUSI        * }


// Fungsi untuk setting konfigurasi database
function  tulisFileIni(hostname : String; dbname : string; user : string; pass : string; author :string; programer :string):boolean;
function  getWindir   : string;
function  getHostname : String;
function  getDBasname : String;
function  getUsername : String;
function  getPassword : String;
function  getAuthor   : String;
function  getProgramer: String;
function  bukaKoneksi : Boolean;
function  tutupKoneksi: Boolean;

function SimpanFoto(const src: string): string;
procedure LoadFoto(src: string ; hasil: TImage);
procedure LoadFoto1(src: string ; hasil: TQRImage);
procedure HapusFoto(src: string);


// Fungsi Sekuriti data
function Buka(const s: String; CryptInt: Integer): String;
function Kunci(const s: String; CryptInt: Integer): String;
function Enkripsi(src: string): string;
function Dekripsi(src: string): string;

// Fungsi dialog
function  Tanya(s : string): boolean;
procedure Peringatan(s : string);
procedure Salah(s : string);
procedure Berhasil(s : string);
procedure Informasi(s : string);

// Fungsi validasi input
function  AllEmpty(slSource: TStringList): Boolean;
function isEmpty(slSource,slError: TStringList): Boolean;
function  CekVal(const s: string): boolean;
procedure NoSelectCombo(Combo : TComboBox; s : String);
procedure NoSelectRadio(Radio : TRadioGroup; s : String);
procedure CekNullEdit(Edit : TEdit; s : String);
procedure CekPanjangInput(Edit: TEdit; p: Byte; s: String);
procedure cekNullMemo(memo: TMemo; s: String);
procedure cekRedundance(Query: TZQuery; namatabel: String; param : String);


	//prosedur dan fungsi pengolah database
function CommandSQL(Query: TZQuery ; _SQL: string ; cari: Boolean): boolean;
function Tambah(Query: TZQuery ; nmTabel: string ; slField,slValue: TStringList): boolean;
function Ubah(Query: TZQuery ; fPrimary,sPrimary,nmTabel: string ; slField,slValue: TStringList): boolean;
function Hapus(Query: TZQuery ; nmTabel,fPrimary1,fPrimary2,sPrimary1,sPrimary2: string): boolean;
function CariValue(Query: TZQuery ; nmField: string): string;
function cekTanggal(s: String): String;
procedure isiCombo(const Query: TZQuery ; nmField1,nmField2: string ; comboBox: TCombobox);
procedure KosongTabel(Query : TZQuery; nmTabel : String);
procedure TampilSatuKeCombo(combo: TComboBox; _SQL: String);
procedure TampilDuaKeCombo(combo: TComboBox; Query: TZQuery; _SQL: String);
function GetZeroString(s: string ; iLength: integer): string;
procedure TampilTigaKeCombo(combo: TComboBox; _SQL: String);
function HariIni: string;
function  getWaktu    : String;
function Kadaluwarso(Besok:TDateTimePicker): string;
function KonversiTgl(tgl : TDateTime) : String;
function TampilDuit(duit : String):String;
function terbilang(x: LongInt; style: Byte): String;
function huruf(x: LongInt): String;

const
  app_name = 'SMART SYSTEM BACKOFFICE';


var
    MyIniFile                     : TIniFile;
    Query,QTmp                    : TZQuery;
    _SQL,Tmp, ParamValue          : String;
	  stsEdit                       : boolean;
    trFlag                        : TReplaceFlags;
    nmField,nmValue               : TStringList;
    
implementation

uses DateUtils;


//========================================================================================================================================

function tulisFileIni(hostname : String; dbname : string; user : string; pass : string; author :string; programer :string):boolean;
begin
  _SQL      := ExtractFilePath(Application.ExeName)+ 'setting.ini';
  MyIniFile := TIniFile.Create(_SQL);
  MyIniFile.WriteString('setting', 'hostname', hostname);
  MyIniFile.WriteString('setting','dbname', dbname);
  MyIniFile.WriteString('setting','user',user);
  MyIniFile.WriteString('setting', 'pass',pass);
  MyIniFile.WriteString('setting', 'author',author);
  MyIniFile.WriteString('setting', 'programer',programer);

  with MyIniFile do
    begin
      if (
          (ValueExists('setting','hostname')) and
          (ValueExists('setting','dbname')) and
          (ValueExists('setting','user'))
         ) then result := True else result := False;
    end;

  MyIniFile.Free;
end;


function getWindir : string;
var WinDir : array [0..MAX_PATH] of char;
begin
   GetWindowsDirectory(@WinDir, MAX_PATH);
   Result := String(WinDir);
end;

function getHostName : String;
begin
   _SQL       := ExtractFilePath(Application.ExeName) + 'setting.ini';
   MyIniFile  := TIniFile.Create(_SQL);
   Tmp        := MyIniFile.ReadString('setting','hostname','');
   MyIniFile.Free;
   Result     := Tmp;
end;

function getDBasName : String;
begin
   _SQL       := ExtractFilePath(Application.ExeName) + 'setting.ini';
   MyIniFile  := TIniFile.Create(_SQL);
   Tmp        := MyIniFile.ReadString('setting','dbname','');
   MyIniFile.Free;
   Result     := Tmp;
end;

function getUserName : String ;
begin
   _SQL       := ExtractFilePath(Application.ExeName) + 'setting.ini';
   MyIniFile  := TIniFile.Create(_SQL);
   Tmp        := MyIniFile.ReadString('setting','user','');
   MyIniFile.Free;
   Result     := Tmp;
end;

function getPassword : String;
begin
   _SQL       := ExtractFilePath(Application.ExeName) + 'setting.ini';
   MyIniFile  := TIniFile.Create(_SQL);
   Tmp        := MyIniFile.ReadString('setting','pass','');
   MyIniFile.Free;
   Result     := Tmp;
end;

function  getAuthor   : String;
begin
   _SQL       := ExtractFilePath(Application.ExeName) + 'setting.ini';
   MyIniFile  := TIniFile.Create(_SQL);
   Tmp        := MyIniFile.ReadString('setting','author','');
   MyIniFile.Free;
   Result     := Tmp;
end;

function  getProgramer: String;
begin
   _SQL       := ExtractFilePath(Application.ExeName) + 'setting.ini';
   MyIniFile  := TIniFile.Create(_SQL);
   Tmp        := MyIniFile.ReadString('setting','programer','');
   MyIniFile.Free;
   Result     := Tmp;
end;


function bukaKoneksi : Boolean;
begin
   try
      Query             := TZQuery.Create(nil);
      QTmp              := TZQuery.Create(nil);
      Query.Connection  := DM.Connection;
      QTmp.Connection   := DM.Connection;
      With DM.Connection do begin
        Disconnect;
        protocol        := 'mysql';
        Database        := getDBasName;
        HostName        := getHostName;
        User            := getUserName;
        Password        := getPassword;
        Connect;
      end;
      Result  := True;
   except
      Result  := False;
   end;
end;   

function tutupKoneksi : Boolean;
begin
  try
    DM.Connection.Connected := False;
    Query.Free;
    QTmp.Free;
    Result  := True;
  except
    Result  := False;
  end;
end;

//========================================================================================================================================



//========================================================================================================================================

function isEmpty(slSource,slError: TStringList): Boolean;
var
	i: integer;
	s: string;
begin
  s:='';
  result:=False;
for i:=0 to slSource.Count - 1 do
	begin
		if Trim(slSource[i]) = '' then
		  begin
  			s:=s + #13 + '- ' + slError[i];
		  end;

	end;
	
  if trim(s) <> '' then
	begin
	  Result:=True;
	  Peringatan('Proses tidak dapat dilanjutkan karena masih ada input data yang kosong, yaitu : ' + #13 + s + #13 + #13 + 'Mohon melengkapi data tersebut terlebih dahulu');
	end;
end;


function SimpanFoto(const src: string): string;
var  sFilename,sDest: string;
begin
  sFileName := ExtractFileName(src);
  sDest     := ExtractFilePath(Application.exename) + '\dirFoto\' + sFileName;
  CopyFile(PChar(src),PChar(sDest),False);
  if Trim(src) = '' then 	Result:='' else Result:=sFileName ;
end;

procedure LoadFoto(src: string ; hasil: TImage);
var sPath: string;
begin
  sPath:=ExtractFilePath(Application.ExeName) + '\dirFoto\' + src;
  if not FileExists(sPath) then begin
    hasil.Picture:=nil;
    exit;
  end;
  try
    hasil.Picture.LoadFromFile(sPath);
  except
  end;
end;

procedure LoadFoto1(src: string ; hasil: TQRImage);
var sPath: string;
begin
  sPath:=ExtractFilePath(Application.ExeName) + '\dirFoto\' + src;
  if not FileExists(sPath) then 
  begin
    hasil.Picture:=nil;
    exit;
  end;
  try
    hasil.Picture.LoadFromFile(sPath);
  except
  end;
end;

procedure HapusFoto(src: string);
var sPath: string;
begin
  sPath:=ExtractFilePath(Application.ExeName) + '\dirFoto\' + src;
  DeleteFile(PChar(sPath));
end;




//========================================================================================================================================

function Kunci(const s: String; CryptInt: Integer): String;
var
  i: integer;
  s2: string;
begin
  if not (Length(s) = 0) then
    for i := 1 to Length(s) do
      s2 := s2 + Chr(Ord(s[i]) + CrypTint);
  Result := s2;
end;

function Buka(const s: String; CryptInt: Integer): String;
var
  i: integer;
  s2: string;
begin
  if not (Length(s) = 0) then
    for i := 1 to Length(s) do
      s2 := s2 + Chr(Ord(s[i]) - cryptint);
  Result := s2;
end;

function Enkripsi(src: string): string;
begin
    result:=Kunci(src,711754);
end;

function Dekripsi(src: string): string;
begin
   result:=Buka(src,711754); 
end;

//=======================================================================================================================================================
// fungsi tanya
function Tanya(s : string): boolean;
var i: integer;
begin
  i      := Application.MessageBox(PChar('Yakin anda akan ' + s + ' ?...'),'Konfirmasi',MB_YESNO or MB_ICONQUESTION);
  Result := not Boolean(i mod 2);
end;

procedure Peringatan(s: string);
begin
  Application.MessageBox(PChar(s),'Peringatan',MB_OK or MB_ICONWARNING);
end;

procedure Salah(s: string);
begin
  Application.MessageBox(PChar(s),'Kesalahan',MB_OK or MB_ICONERROR);
end;

procedure Berhasil(s: string);
begin
  Application.MessageBox(PChar(s),'Berhasil',MB_OK or MB_ICONINFORMATION);
end;

procedure Informasi(s: string);
begin
  Application.MessageBox(PChar(s),'Informasi',MB_OK or MB_ICONINFORMATION);
end;

//=======================================================================================================================================================
// validasi input

function AllEmpty(slSource: TStringList): Boolean;
var i: integer;
begin
  result:=False;
  for i:=0 to slSource.Count - 1 do	begin
		if Trim(slSource[i]) = '' then
      result:=True;
	end;
end;

function CekVal(const s: string): boolean;
begin
  result:=trim(s) = '';
end;

procedure NoSelectCombo(Combo : TComboBox; s: String);
begin
  if ((Combo.ItemIndex=-1) and (Trim(Combo.Text)='')) then begin
    Peringatan('Maaf, '+s+' harus dipilih...!');
    Combo.SetFocus;
    Abort;
  end;
end;

procedure NoSelectRadio(Radio : TRadioGroup; s: String);
begin
  if Radio.ItemIndex=-1 then begin
    Peringatan('Maaf, '+s+' harus dipilih...!');
    Radio.SetFocus;
    Abort;
  end;
end;

procedure CekNullEdit(Edit: TEdit; s: String);
begin
  if Trim(Edit.Text)='' then begin
    Peringatan('Maaf, '+s+' tidak boleh kosong...!');
    Edit.Color := $001D22DC;
    Edit.SetFocus;
    Abort;
  end;  
end;

procedure CekPanjangInput(Edit: TEdit; p: Byte; s: String);
begin
  if Length(Edit.Text) < p then begin
     Peringatan('Maaf, '+s+' tidak boleh kurang dari '+IntToStr(p)+' karakter...!');
     Edit.SetFocus;
     Abort;
  end;
end;


procedure cekNullMemo(memo: TMemo; s: String);
begin
   if Trim(memo.Text) = '' then begin
      Peringatan('Maaf, '+s+' harus diisi...!');
      memo.SetFocus;
      Abort;
   end;
end;

procedure cekRedundance(Query: TZQuery; namatabel: String; param : String);
begin
   commandSQL(Query,'SELECT * FROM '+namatabel+' WHERE '+param,True);
   if not Query.IsEmpty then begin
      Salah('Data tersebut telah ada dalam database !');
      Abort;
   end;
end;


//=======================================================================================================================================================

//prosedur dan fungsi manipulasi database
function CommandSQL(Query: TZQuery ; _SQL: string ; cari: Boolean): boolean;
begin
  try
    result:=True;
	    with Query do begin
			  Close;
			  SQL.Clear;
			  SQL.Add(_SQL);
			  if cari then
			    	Open
			  else
				    ExecSQL;
	    end;
  except
    result:=False;
    Salah('Perintah Query Gagal dijalankan');
  end;
end;

function Tambah(Query: TZQuery ; nmTabel: string ; slField,slValue: TStringList): boolean;
var sField,sValue : string;
	  iField,iValue : integer;
	  _SQL          : string;
begin
  //definisikan perintah awal SQL
  //INSERT INTO barang VALUES('tes1','tes2')
  _SQL:='INSERT INTO ' + nmTabel + '(';
  //definisikan per stringlist
  //untuk nama field
  for iField:=0 to slField.Count - 1 do begin
		sField  := sField + slField[iField];
		sField  := sField + ',';
	end;
  sField:=Copy(sField,0,Length(sField) - 1) + ')VALUES(';

  //untuk nama value
  for iValue:=0 to slValue.Count - 1 do begin
		sValue  := sValue + '"' + slValue[iValue] + '"';
		sValue  := sValue + ',';
	end;
    sValue  :=Copy(sValue,0,Length(sValue) - 1) + ')';
    _SQL    :=_SQL + sField + sValue;
    result  :=CommandSQL(Query,_SQL,False);
end;

function Ubah(Query: TZQuery ; fPrimary,sPrimary,nmTabel: string ; slField,slValue: TStringList): boolean;
var
	_SQL,s: string;
	i     : integer;
begin
//UPDATE nama_tabel set nmfield1 = 'isivalue1', nmfield2 = 'isivalue2'  WHERE primarykey = 'isi' 
  _SQL:='UPDATE ' + nmTabel + ' SET ';
  for i:=0 to slField.Count - 1 do 	begin
  	s   := s + slField[i] + '="' + slValue[i] + '",';
	end;
  s:=Copy(s,0,Length(s) - 1);
  _SQL:=_SQL + s + ' WHERE ' + fPrimary + ' = "' + sPrimary + '"';
  result:=CommandSQL(Query,_SQL,false);
end;

function Hapus(Query: TZQuery ; nmTabel,fPrimary1,fPrimary2,sPrimary1,sPrimary2: string): boolean;
var  _SQL: string;
begin
  if Trim(fPrimary2) = '' then
	    _SQL:='DELETE FROM ' + nmTabel + ' WHERE ' + fPrimary1 + '="' + sPrimary1 + '"'	
  else
	    _SQL:='DELETE FROM ' + nmTabel + ' WHERE ' + fPrimary1 + '="' + sPrimary1 + '" AND ' + fPrimary2 + '="' + sPrimary2 + '"';
  result:=CommandSQL(Query,_SQL,False);
end;

function CariValue(Query: TZQuery ; nmField: string): string;
begin
  Result:=Query.FieldByName(nmField).AsString;
end;

procedure isiCombo(const Query: TZQuery ; nmField1,nmField2: string ; comboBox: TCombobox);
begin
  comboBox.Clear;
  while not(Query.Eof) do
	  begin
		  if Trim(nmField2) = '' then
			    comboBox.Items.Add(Query.FieldByName(nmField1).AsString)
  		else
			    comboBox.Items.Add(Query.FieldByName(nmField1).AsString + ' - ' + Query.FieldByName(nmField2).AsString);
	    Query.Next;
	  end;
end;

procedure KosongTabel(Query:TZQuery; nmTabel: String);
begin
   CommandSQL(Query,'TRUNCATE '+nmTabel,False);
end;

procedure TampilSatuKeCombo(combo: TComboBox; _SQL: String);
begin
   combo.Clear;
   CommandSQL(Query, _SQL,True);
   with Query do begin
      First;
      while not Eof do begin
         combo.Items.Add(Fields[0].AsString);
         Next;
      end;
   end;
end;

procedure TampilDuaKeCombo(combo: TComboBox;Query: TZQuery; _SQL: String);
begin
   combo.Clear; 
   CommandSQL(Query, _SQL,True);
   with Query do begin
      First;
      while not Eof do begin
         combo.Items.Add(Fields[0].AsString+' - '+Fields[1].AsString);
         Next;
      end;
   end;
end;

procedure TampilTigaKeCombo(combo: TComboBox; _SQL: String);
begin
   combo.Clear;
   CommandSQL(Query, _SQL,True);
   with Query do begin
      First;
      while not Eof do begin
         combo.Items.Add(Fields[0].AsString+' - '+
                         Fields[1].AsString+' - '+
                         Fields[2].AsString);
         Next;
      end;
   end;
end;

function cekTanggal(s: String): String;
var temp : TDate;
begin
   try
      temp := StrToDate(s);
      Result := FormatDateTime('yyyy-mm-dd',temp);
   except
      Result := s;
   end;
end;

function GetWaktu:String;
begin
  result:= FormatDateTime('yyyy-mm-dd hh:mm:ss',Now);
end;

function HariIni: string;
var hari  : array[1..7] of string;
    bulan : array[1..12] of string;
    y,m,d : word;
begin
  DecodeDate(NOW,y,m,d);
  bulan[1]  :='Januari';
  bulan[2]  :='Februari';
  bulan[3]  :='Maret';
  bulan[4]  :='April';
  bulan[5]  :='Mei';
  bulan[6]  :='Juni';
  bulan[7]  :='Juli';
  bulan[8]  :='Agustus';
  bulan[9]  :='September';
  bulan[10] :='Oktober';
  bulan[11] :='November';
  bulan[12] :='Desember';

  hari[1]   :='Minggu';
  hari[2]   :='Senin';
  hari[3]   :='Selasa';
  hari[4]   :='Rabu';
  hari[5]   :='Kamis';
  hari[6]   :='Jumat';
  hari[7]   :='Sabtu';
 // Result:=hari[DayOfWeek(d)] + ', ' + IntToStr(d) + '  ' + bulan[m] + '  ' + IntToStr(y);
 Result:=IntToStr(d) + '  ' + bulan[m] + '  ' + IntToStr(y);
end;

function GetZeroString(s: string ; iLength: integer): string;
var
    str: string;
begin
  str:='000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
  result:=Copy(str,0,iLength - Length(s)) + s;
end;

function Kadaluwarso(Besok:TDateTimePicker): string;
var hari  : array[1..7] of string;
    bulan : array[1..12] of string;
    y,m,d : word;

begin

  DecodeDate(Besok.Date,y,m,d);
  bulan[1]  :='Januari';
  bulan[2]  :='Februari';
  bulan[3]  :='Maret';
  bulan[4]  :='April';
  bulan[5]  :='Mei';
  bulan[6]  :='Juni';
  bulan[7]  :='Juli';
  bulan[8]  :='Agustus';
  bulan[9]  :='September';
  bulan[10] :='Oktober';
  bulan[11] :='November';
  bulan[12] :='Desember';

  hari[1]   :='Minggu';
  hari[2]   :='Senin';
  hari[3]   :='Selasa';
  hari[4]   :='Rabu';
  hari[5]   :='Kamis';
  hari[6]   :='Jumat';
  hari[7]   :='Sabtu';
  Result:=IntToStr(d) + '  ' + bulan[m] + '  ' + IntToStr(y);
end;

function KonversiTgl(tgl : TDateTime) : String;
begin
  Result := FormatDateTime('dddd, dd mmmm yyyy',tgl);
end;


function TampilDuit(duit : String):String;
begin
 Result := FormatCurr('"",#000",',StrToCurr(duit));
end;

function huruf(x: LongInt): String;
var angka : array of String;
begin
   SetLength(angka, 12);
   angka[0] := '';
   angka[1] := 'Satu';
   angka[2] := 'Dua';
   angka[3] := 'Tiga';
   angka[4] := 'Empat';
   angka[5] := 'Lima';
   angka[6] := 'Enam';
   angka[7] := 'Tujuh';
   angka[8] := 'Delapan';
   angka[9] := 'Sembilan';
   angka[10]:= 'Sepuluh';
   angka[11]:= 'Sebelas';

   if x < 12 then
      tmp := ' ' + angka[x]
   else if (x <20) then
      tmp := huruf(x - 10) + ' Belas'
   else if (x <100) then
      tmp := huruf(x div 10) + ' Puluh' + huruf(x mod 10)
   else if (x <200) then
      tmp := ' Seratus' + huruf(x - 100)
   else if (x <1000) then
      tmp := huruf(x div 100) + ' Ratus' + huruf(x mod 100)
   else if (x <2000) then
      tmp := ' Seribu' + huruf(x - 1000)
   else if (x <1000000) then
      tmp := huruf(x div 1000) + ' Ribu' + huruf(x mod 1000)
   else if (x <1000000000) then
      tmp := huruf(x div 1000000) + ' Juta' + huruf(x mod 1000000)
   else if (x <1000000000000) then
      tmp := huruf(x div 1000000000) + ' Milyar' + huruf(x mod 1000000000)
   else if (x <1000000000000000) then
      tmp := huruf(x div 1000000000000) + ' Trilyun' + huruf(x mod 1000000000000)
   else tmp := 'Segitu';
      Result := tmp;
end;

function terbilang(x: LongInt; style: Byte): String;
var hasil: String;
begin
   if (x<0) then
      hasil := 'Minus '+ huruf(x)
   else
      hasil := huruf(x);
   if hasil <> '' then hasil := hasil;
   case style of
      1 : hasil := UpperCase(hasil);
      2 : hasil := LowerCase(hasil);
   end;
   Result := hasil+' rupiah';
end;

//=======================================================================================================================================================


end.
